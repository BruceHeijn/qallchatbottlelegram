import telebot
import random
import time
import json
import os
import threading
import schedule
import requests
import datetime
import gspread
from google.oauth2.service_account import Credentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TENOR_API_KEY = os.getenv("TENOR_API_KEY")  # API-–∫–ª—é—á Tenor
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")  # JSON-–∫–ª—é—á Google Cloud

bot = telebot.TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_ID = ("SPREADSHEET_ID")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ ID —Å–≤–æ–µ–π Google –¢–∞–±–ª–∏—Ü—ã
SHEET_NAME = "Sheet1"  # –ò–º—è –ª–∏—Å—Ç–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
def init_sheets():
    try:
        creds_dict = json.loads(GOOGLE_CREDENTIALS)
        creds = Credentials.from_service_account_info(
            creds_dict,
            scopes=[
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive",
            ],
        )
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not sheet.get("A1:D1"):
            sheet.append_row(["–î–∞—Ç–∞", "User ID", "Username", "–°—Ç–∞—Ç—É—Å"])
        return sheet
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

sheet = init_sheets()

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è users –∏ last_choice)
USERS_FILE = "users.json"
LAST_CHOICE_FILE = "last_choice.json"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_data(file_name, default):
    if os.path.exists(file_name):
        with open(file_name, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return default
    return default

def save_data(file_name, data):
    with open(file_name, "w") as f:
        json.dump(data, f, indent=2)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
users = load_data(USERS_FILE, {})
last_choice = load_data(LAST_CHOICE_FILE, {})

# –§—Ä–∞–∑—ã –¥–ª—è roast (agr)
roast_phrases = [
    "{name}, —Ç—ã —Å–ª–æ–≤–Ω–æ –±–∞–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äî –≤—Å–µ —Ç–µ–±—è –≤–∏–¥—è—Ç, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç —á–∏–Ω–∏—Ç—å.",
    "{name}, —Ç–≤–æ–∏ –ø–æ–±–µ–¥—ã —Ç–∞–∫–∏–µ –∂–µ —Ä–µ–¥–∫–∏–µ, –∫–∞–∫ Wi-Fi –≤ –¥–µ—Ä–µ–≤–Ω–µ.",
    "{name}, –µ—Å–ª–∏ –±—ã —Ç—É–ø–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª–∞—Å—å, —Ç—ã –±—ã–ª –±—ã –≥–æ—Ä–æ–¥–æ–º-–º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–æ–º.",
    "{name}, —Ç—ã –∫–∞–∫ update Windows ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–µ –≤–æ–≤—Ä–µ–º—è –∏ –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–µ–Ω.",
    "{name}, –∫–æ–≥–¥–∞ –º–æ–∑–≥–∏ —Ä–∞–∑–¥–∞–≤–∞–ª–∏, —Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –º–µ–º–∞–º–∏ —Å—Ç–æ—è–ª.",
    "{name}, —Å —Ç–æ–±–æ–π —Å–∫—É—á–Ω–æ –¥–∞–∂–µ –∫–æ—Ç–∞–º.",
    "{name}, —Ç—ã —Å–ª–æ–≤–Ω–æ —Ñ–∏–Ω–∞–ª –ò–≥—Ä—ã –ü—Ä–µ—Å—Ç–æ–ª–æ–≤ ‚Äî –≤—Å–µ –∂–¥–∞–ª–∏ –±–æ–ª—å—à–µ–≥–æ, –∞ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–±—è.",
]

# –≠–ø–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è choose
epic_phrases = [
    "–í –≤–µ–ª–∏–∫–æ–π –±–∏—Ç–≤–µ —Å—É–¥–µ–± {handsome} –≤–æ—Å—Å—Ç–∞–ª, –∞ {not_handsome} –ø–∞–ª...",
    "–ö–∞–∫ —Å–∫–∞–∑–∞–ª –±—ã –ì–µ–Ω–¥–∞–ª—å—Ñ: –∫—Ä–∞—Å–∞–≤—á–∏–∫ —Å–µ–≥–æ–¥–Ω—è ‚Äî {handsome}, –∞ –≤ —Ç–µ–Ω–∏ –æ—Å—Ç–∞–ª—Å—è {not_handsome}.",
    "–°—É–¥—å–±–∞ –±—Ä–æ—Å–∏–ª–∞ –∫–æ—Å—Ç–∏: {handsome} –∏–¥—ë—Ç –≤ –ª–µ–≥–µ–Ω–¥—ã, {not_handsome} ‚Äî –≤ –∞–Ω–µ–∫–¥–æ—Ç—ã.",
    "–î–∞–∂–µ –¥—Ä–∞–∫–æ–Ω—ã –±—ã —Å–∫–ª–æ–Ω–∏–ª–∏ –≥–æ–ª–æ–≤—ã –ø–µ—Ä–µ–¥ {handsome}, –Ω–æ –Ω–∞–¥ {not_handsome} —Å–º–µ—è–ª–∏—Å—å –±—ã –≥–Ω–æ–º—ã.",
    "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –º–∏—Ä —É–∑–Ω–∞–ª –≥–µ—Ä–æ—è ‚Äî {handsome}. –ò —É–∑–Ω–∞–ª, –∫–æ–≥–æ –≤–∏–Ω–∏—Ç—å ‚Äî {not_handsome}.",
    "–ñ–¢ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ç–µ–ª –±–∞–±—É, –Ω–æ —É–≤—ã. –ì–µ—Ä–æ–π –¥–Ω—è - {handsome}. –ê –ø–∏–¥–æ—Ä, –∫–∞–∫ –∑–∞—á–∞—Å—Ç–≤—É—é –±—ã–≤–∞–µ—Ç - {not_handsome}.",
]

# –ú–æ–Ω–µ—Ç–∫–∞
coin_sides = [
    "–û—Ä—ë–ª",
    "–†–µ—à–∫–∞",
    "–ú–æ–Ω–µ—Ç–∞ –≤—Å—Ç–∞–ª–∞ –Ω–∞ —Ä–µ–±—Ä–æ, –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤ –µ–±–ª–æ!",
    "–ú–æ–Ω–µ—Ç–∞ —É–ª–µ—Ç–µ–ª–∞ –∏ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞—Å—å, —Ç–≤–æ—è –ø–æ–ø–∞ —Ä–∞—Å–ø–∞—Ä—Ö–Ω—É–ª–∞—Å—å ü™ô",
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞
def send_daily_meme():
    for chat_id in users.keys():
        try:
            url = f"https://tenor.googleapis.com/v2/search?q=funny&key={TENOR_API_KEY}&limit=20"
            r = requests.get(url)
            if r.status_code == 200:
                data = r.json()
                if "results" in data and len(data["results"]) > 0:
                    gif_url = random.choice(data["results"])["media_formats"]["gif"]["url"]
                    bot.send_animation(chat_id, gif_url, caption="–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–µ–º—á–∏–∫ ü§£")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ roast
def send_daily_roast():
    for chat_id in users.keys():
        if chat_id not in users or not users[chat_id]:
            continue
        target = random.choice(users[chat_id])
        target_name = target["name"]
        phrase = random.choice(roast_phrases).replace("{name}", f"@{target_name}")
        for participant in users[chat_id]:
            bot.send_message(
                chat_id, f"üî• @{participant['name']} –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä –Ω–∞ @{target_name}!\n{phrase}"
            )

# –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
def schedule_random_times():
    schedule.clear("daily_tasks")
    meme_hour = random.randint(6, 23)
    meme_minute = random.randint(0, 59)
    roast_hour = random.randint(6, 23)
    roast_minute = random.randint(0, 59)
    schedule.every().day.at(f"{meme_hour:02d}:{meme_minute:02d}").do(send_daily_meme).tag(
        "daily_tasks"
    )
    schedule.every().day.at(f"{roast_hour:02d}:{roast_minute:02d}").do(
        send_daily_roast
    ).tag("daily_tasks")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≥—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å
def send_daily_agr():
    for chat_id in users.keys():
        if chat_id not in users or not users[chat_id]:
            continue
        target = random.choice(users[chat_id])
        target_name = target["name"]
        phrase = random.choice(roast_phrases).replace("{name}", f"@{target_name}")
        for participant in users[chat_id]:
            bot.send_message(
                chat_id, f"üî• @{participant['name']} –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä –Ω–∞ @{target_name}!\n{phrase}"
            )

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
def schedule_daily_agr():
    schedule.clear("daily_agr")
    agr_hour = random.randint(6, 23)
    agr_minute = random.randint(0, 59)
    schedule.every().day.at(f"{agr_hour:02d}:{agr_minute:02d}").do(send_daily_agr).tag(
        "daily_agr"
    )

# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≥—Ä–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
schedule_daily_agr()
schedule.every().day.at("05:55").do(schedule_daily_agr)

# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
schedule_random_times()
schedule.every().day.at("05:55").do(schedule_random_times)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(30)

threading.Thread(target=run_scheduler, daemon=True).start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(
    commands=["start", "test", "list", "choose", "stats", "register", "agr", "monetka"]
)
def handle_commands(message):
    chat_id = str(message.chat.id)
    command = message.text.split()[0].split("@")[0].lower()

    if command in ["/start", "/test"]:
        bot.reply_to(message, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ö–≤–∞–ª–∞ –ê–Ω–Ω—É–±–∏—Å—É! üòä")

    elif command == "/list":
        if chat_id not in users or not users[chat_id]:
            bot.reply_to(message, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register, –µ–±–∞–Ω—Ç—è–∏!")
        else:
            names = [u["name"] for u in users[chat_id]]
            bot.reply_to(message, f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(names)}")

    elif command == "/choose":
        if chat_id not in users or len(users[chat_id]) < 2:
            bot.reply_to(message, f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞! –°–µ–π—á–∞—Å: {len(users.get(chat_id, []))}")
            return

        current_time = time.time()
        if chat_id in last_choice and current_time - last_choice[chat_id] < 86400:
            remaining = int(86400 - (current_time - last_choice[chat_id]))
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            bot.reply_to(message, f"–ï—â—ë —Ä–∞–Ω–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {hours} —á {minutes} –º–∏–Ω.")
            return

        participants = users[chat_id]
        handsome = random.choice(participants)
        not_handsome = random.choice(participants)
        while not_handsome["id"] == handsome["id"]:
            not_handsome = random.choice(participants)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—ã
        if sheet:
            try:
                current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                sheet.append_row(
                    [current_date, handsome["id"], "@" + handsome["name"], "–ö—Ä–∞—Å–∞–≤—á–∏–∫"]
                )
                sheet.append_row(
                    [current_date, not_handsome["id"], "@" + not_handsome["name"], "–ü–∏–¥–æ—Ä"]
                )
            except Exception as e:
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}")

        # –§—Ä–∞–∑–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
        phrase = random.choice(epic_phrases).format(
            handsome="@" + handsome["name"], not_handsome="@" + not_handsome["name"]
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ—Ä–∞–∑–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –∏ –ø–∏–¥–æ—Ä–∞
        bot.reply_to(message, phrase)
        bot.reply_to(message, f"üéâ –ö—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è: @{handsome['name']}")
        bot.reply_to(message, f"üëé –ü–∏–¥–æ—Ä –¥–Ω—è: @{not_handsome['name']}")

        last_choice[chat_id] = current_time
        save_data(LAST_CHOICE_FILE, last_choice)

    elif command == "/stats":
        if not sheet:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º.")
            return

        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            data = sheet.get_all_values()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if not data:
                bot.reply_to(message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /choose!")
                return

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {}
            for row in data:
                user_id, username, status = row[1], row[2], row[3]
                if user_id not in stats:
                    stats[user_id] = {"name": username, "wins": 0, "losses": 0}
                if status == "–ö—Ä–∞—Å–∞–≤—á–∏–∫":
                    stats[user_id]["wins"] += 1
                elif status == "–ü–∏–¥–æ—Ä":
                    stats[user_id]["losses"] += 1

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            sorted_stats = sorted(stats.items(), key=lambda x: x[1]["wins"], reverse=True)
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            for _, data in sorted_stats:
                total = data["wins"] + data["losses"]
                win_rate = (data["wins"] / total * 100) if total > 0 else 0
                loss_rate = (data["losses"] / total * 100) if total > 0 else 0
                response += f"{data['name']}: –ö—Ä–∞—Å–∞–≤—á–∏–∫ - {data['wins']}, –ü–∏–¥–æ—Ä - {data['losses']}\n"
                response += f"‚û° –ö—Ä–∞—Å–∞–≤—á–∏–∫ {win_rate:.1f}% | –ü–∏–¥–æ—Ä {loss_rate:.1f}%\n\n"
            bot.reply_to(message, response)
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    elif command == "/register":
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name or f"User_{user_id}"
        if chat_id not in users:
            users[chat_id] = []
        if user_id not in [u["id"] for u in users[chat_id]]:
            users[chat_id].append({"id": user_id, "name": username})
            save_data(USERS_FILE, users)
            bot.reply_to(message, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! @{username}")
        else:
            bot.reply_to(message, f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –¥–æ–ª–±–∞—ë–±! @{username}")

    elif command == "/agr":
        if chat_id not in users or not users[chat_id]:
            bot.reply_to(message, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å—É–∫! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")
            return
        author_id = message.from_user.id
        author = (
            message.from_user.username
            or message.from_user.first_name
            or f"User_{author_id}"
        )
        possible_targets = [u for u in users[chat_id] if u["id"] != author_id]
        if not possible_targets:
            bot.reply_to(message, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≥—Ä!")
            return
        target = random.choice(possible_targets)
        target_name = target["name"]
        phrase = random.choice(roast_phrases).replace("{name}", f"@{target_name}")
        response = f"üî• @{author} –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä!\n{phrase}"
        bot.reply_to(message, response)

    elif command == "/monetka":
        result = random.choice(coin_sides)
        bot.reply_to(message, f"–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞: {result}")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling(none_stop=True)

