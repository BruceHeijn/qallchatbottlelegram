import telebot
import random
import time
import json
import os
import threading
import schedule
import requests
import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = "8367662884:AAF2Q8v19wGyPI4wxVeLx-liUrby6grHmHQ"
TENOR_API_KEY = "AIzaSyDTE8VLCHXtqsZksOmXMC9z4Lri9FnpYRA"

bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.json'
LAST_CHOICE_FILE = 'last_choice.json'
STATS_FILE = 'stats.json'
LAST_AGR_FILE = 'last_agr.json'
USED_ROASTS_FILE = 'used_roasts.json'
LAST_MEM_FILE = 'last_mem.json'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ–º–∞

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_data(file_name, default):
    if os.path.exists(file_name):
        with open(file_name, 'r') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return default
    return default

def save_data(file_name, data):
    with open(file_name, 'w') as f:
        json.dump(data, f, indent=2)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
users = load_data(USERS_FILE, {})
last_choice = load_data(LAST_CHOICE_FILE, {})
stats = load_data(STATS_FILE, {})
last_agr = load_data(LAST_AGR_FILE, {})
used_roasts = load_data(USED_ROASTS_FILE, {})
last_mem = load_data(LAST_MEM_FILE, {})  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ–º–∞

# –§—Ä–∞–∑—ã –¥–ª—è roast (agr)
roast_phrases = [
    "{name}, —Ç—ã —Å–ª–æ–≤–Ω–æ –±–∞–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äî –≤—Å–µ —Ç–µ–±—è –≤–∏–¥—è—Ç, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç —á–∏–Ω–∏—Ç—å.",
    "{name}, —Ç–≤–æ–∏ –ø–æ–±–µ–¥—ã —Ç–∞–∫–∏–µ –∂–µ —Ä–µ–¥–∫–∏–µ, –∫–∞–∫ Wi-Fi –≤ –¥–µ—Ä–µ–≤–Ω–µ.",
    "{name}, –µ—Å–ª–∏ –±—ã —Ç—É–ø–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª–∞—Å—å, —Ç—ã –±—ã–ª –±—ã –≥–æ—Ä–æ–¥–æ–º-–º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–æ–º.",
    "{name}, —Ç—ã –∫–∞–∫ update Windows ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–µ –≤–æ–≤—Ä–µ–º—è –∏ –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–µ–Ω.",
    "{name}, –∫–æ–≥–¥–∞ –º–æ–∑–≥–∏ —Ä–∞–∑–¥–∞–≤–∞–ª–∏, —Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –º–µ–º–∞–º–∏ —Å—Ç–æ—è–ª.",
    "{name}, —Å —Ç–æ–±–æ–π —Å–∫—É—á–Ω–æ –¥–∞–∂–µ –∫–æ—Ç–∞–º.",
    "{name}, —Ç—ã —Å–ª–æ–≤–Ω–æ —Ñ–∏–Ω–∞–ª –ò–≥—Ä—ã –ü—Ä–µ—Å—Ç–æ–ª–æ–≤ ‚Äî –≤—Å–µ –∂–¥–∞–ª–∏ –±–æ–ª—å—à–µ–≥–æ, –∞ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–±—è.",
    "{name}, —Ç—ã –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –ø–∏—Ç–æ–Ω–æ–º ‚Äî –±–µ–∑ –∫–æ–Ω—Ü–∞ –ø–∞–¥–∞–µ—à—å!",
    "{name}, —Å —Ç–≤–æ–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –∫–æ–¥ –Ω–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è.",
    "{name}, —Ç—ã –∫–∞–∫ —Ç–µ—Ä–∞–±–∞–π—Ç –Ω–∞ —Ñ–ª–µ—à–∫–µ ‚Äî –≤—Å—ë –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
    "{name}, –¥–∞–∂–µ –≤–∏—Ä—É—Å—ã –æ–±—Ö–æ–¥—è—Ç —Ç–≤–æ—é –≥–æ–ª–æ–≤—É —Å—Ç–æ—Ä–æ–Ω–æ–π.",
    "{name}, —Ç—ã –∫–∞–∫ —Å—Ç–∞—Ä—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–≤–∏—Å–∞–µ—à—å –∏ —Ç–æ—Ä–º–æ–∑–∏—à—å.",
    "{name}, –µ—Å–ª–∏ –±—ã —Ç–≤–æ—ë –ª–∏—Ü–æ –±—ã–ª–æ –±–∞–≥–æ–º, —Ç—ã –±—ã–ª –±—ã –±–∞–≥-—Ç—Ä–µ–∫–µ—Ä–æ–º.",
    "{name}, —É —Ç–µ–±—è –Ω–∞ –ª–∏—Ü–µ –¥–∞–∂–µ —Å–ø–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Å—Ç–∞—é—Ç—Å—è."
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞ —á–µ—Ä–µ–∑ Tenor API
def send_mem(chat_id):
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ
    if chat_id in last_mem and current_time - last_mem[chat_id] < 86400:
        remaining = int(86400 - (current_time - last_mem[chat_id]))
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        return  # –ï—Å–ª–∏ –º–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–∞ —á–µ—Ä–µ–∑ Tenor API
    response = requests.get(f'https://api.tenor.com/v1/search?q=funny&key={TENOR_API_KEY}&limit=1')
    data = response.json()
    
    if 'results' in data:
        meme_url = data['results'][0]['media'][0]['gif']['url']
        bot.send_message(chat_id, f"–í–æ—Ç —Ç–≤–æ–π –º–µ–º: {meme_url}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞
    last_mem[chat_id] = current_time
    save_data(LAST_MEM_FILE, last_mem)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
def send_mem_to_all():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ —á–∞—Ç—ã —Å –±–æ—Ç–æ–º)
    for chat_id in last_mem.keys():
        send_mem(chat_id)

# –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞
def schedule_random_mem():
    schedule.clear('daily_mem')
    mem_hour = random.randint(6, 23)  # –°–ª—É—á–∞–π–Ω—ã–π —á–∞—Å –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 6 –¥–æ 23
    mem_minute = random.randint(0, 59)  # –°–ª—É—á–∞–π–Ω–∞—è –º–∏–Ω—É—Ç–∞
    schedule.every().day.at(f"{mem_hour:02d}:{mem_minute:02d}").do(send_mem_to_all).tag('daily_mem')

# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
schedule_random_mem()

# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–º–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
schedule.every().day.at("05:55").do(schedule_random_mem)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–≥—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
def send_daily_agr():
    for chat_id in users.keys():
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∞–≥—Ä –Ω–µ–¥–∞–≤–Ω–æ
        if chat_id in last_agr and current_time - last_agr[chat_id] < 86400:
            remaining = int(86400 - (current_time - last_agr[chat_id]))
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            continue

        if chat_id not in users or len(users[chat_id]) == 0:
            continue

        # –ê–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã
        author_id = random.choice(users[chat_id])['id']
        author = f"User_{author_id}"

        # –¶–µ–ª—å –∞–≥—Ä–∞ (—Ä–∞–Ω–¥–æ–º–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫)
        target = random.choice(users[chat_id])
        target_name = target['name']

        # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è —Ñ—Ä–∞–∑—É
        if chat_id not in used_roasts:
            used_roasts[chat_id] = []

        available_roasts = [r for r in roast_phrases if r not in used_roasts[chat_id]]
        if not available_roasts:
            used_roasts[chat_id] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            available_roasts = roast_phrases.copy()

        phrase = random.choice(available_roasts)
        used_roasts[chat_id].append(phrase)
        save_data(USED_ROASTS_FILE, used_roasts)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≥—Ä–∞
        phrase = phrase.replace("{name}", f"@{target_name}")
        response = f"üî• @{author} –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä!\n{phrase}"
        bot.send_message(chat_id, response)

        last_agr[chat_id] = current_time
        save_data(LAST_AGR_FILE, last_agr)

# –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥—Ä–∞
def schedule_random_agr():
    schedule.clear('daily_agr')
    agr_hour = random.randint(6, 23)
    agr_minute = random.randint(0, 59)
    schedule.every().day.at(f"{agr_hour:02d}:{agr_minute:02d}").do(send_daily_agr).tag('daily_agr')

# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
schedule_random_agr()
schedule.every().day.at("05:55").do(schedule_random_agr)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(30)

threading.Thread(target=run_scheduler, daemon=True).start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'test', 'list', 'choose', 'stats', 'register', 'agr', 'monetka'])
def handle_commands(message):
    chat_id = str(message.chat.id)
    command = message.text.split()[0].split('@')[0].lower()

    if command in ['/start', '/test']:
        bot.reply_to(message, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ö–≤–∞–ª–∞ –ê–Ω–Ω—É–±–∏—Å—É! üòä")

    elif command == '/list':
        if chat_id not in users or not users[chat_id]:
            bot.reply_to(message, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register, –µ–±–∞–Ω—Ç—è–∏!")
        else:
            names = [u['name'] for u in users[chat_id]]
            bot.reply_to(message, f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(names)}")

    elif command == '/choose':
        if chat_id not in users or len(users[chat_id]) < 2:
            bot.reply_to(message, f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞! –°–µ–π—á–∞—Å: {len(users.get(chat_id, []))}")
            return

        current_time = time.time()

        if chat_id in last_choice and current_time - last_choice[chat_id] < 86400:
            remaining = int(86400 - (current_time - last_choice[chat_id]))
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            bot.reply_to(message, f"–ï—â—ë —Ä–∞–Ω–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {hours} —á {minutes} –º–∏–Ω.")
            return

        bot.reply_to(message, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –¥—É–º–∞—é...")
        time.sleep(1)

        participants = users[chat_id]

        # –í—ã–±–∏—Ä–∞–µ–º "–ø–∏–¥–æ—Ä–∞ –¥–Ω—è" —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        pidor = random.choice(participants)

        # –í—ã–±–∏—Ä–∞–µ–º "–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –¥–Ω—è" —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –∏—Å–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∏–¥–æ—Ä–∞
        remaining_participants = [p for p in participants if p != pidor]
        krasavchik = random.choice(remaining_participants)

        pidor_name = pidor['name']
        krasavchik_name = krasavchik['name']

        bot.reply_to(message, "–ú–∏–Ω—É—Ç–∫—É...")
        time.sleep(2)

        bot.reply_to(message, f"üî• –ò—Ç–∞–∫... –ù–∞—Å—Ç–∞–ª –º–æ–º–µ–Ω—Ç!\n\n"
                              f"üëé **–ü–∏–¥–æ—Ä –¥–Ω—è**: @{pidor_name} ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n"
                              f"üí™ **–ö—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è**: @{krasavchik_name} ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n"
                              "–ù—É —á—Ç–æ, –∫—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π?")

        last_choice[chat_id] = time.time()
        save_data(LAST_CHOICE_FILE, last_choice)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
